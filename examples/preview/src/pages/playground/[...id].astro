---
import Layout from "@/layouts/Layout.astro";
import Sidebar from "@/components/playground/Sidebar.astro";
import Inspector from "@/components/playground/Inspector.astro";
import Playground from "@/components/playground/Playground.astro";
import { getCollection, render } from "astro:content";
import type { CollectionEntry } from "astro:content";

export async function getStaticPaths() {
  const previews: CollectionEntry<"previews">[] =
    await getCollection("previews");
  return previews.map((preview) => ({
    params: { id: preview.id },
    props: { preview },
  }));
}

const { preview } = Astro.props as { preview: CollectionEntry<"previews"> };
const { Content } = await render(preview);

const variantConfig = preview.data.variants ?? {};
const variantKeys = Object.keys(variantConfig);

const optionsArrays: unknown[][] = variantKeys.map(
  (key) => variantConfig[key]?.options ?? [],
);

/**
 * Generic helper to combine arrays into all possible combinations.
 * @param arrays - an array of arrays, each containing items of type T
 * @returns an array of arrays, where each inner array is one combination of values
 */
function getAllCombinations<T>(arrays: T[][]): T[][] {
  return arrays.reduce(
    (combinations, options) =>
      combinations.flatMap((combo) =>
        options.map((option) => [...combo, option]),
      ),
    [[]] as T[][],
  );
}

const combinations = getAllCombinations(optionsArrays);

// Map each combination into an object using the corresponding variant key.
const allVariants: Record<string, unknown>[] = combinations.map(
  (optionValues) => {
    return optionValues.reduce<Record<string, unknown>>(
      (acc, val, idx) => {
        const key = variantKeys[idx];
        acc[key] = val;
        return acc;
      },
      {} as Record<string, unknown>,
    );
  },
);

console.log("All Variants:", allVariants);
---

<Layout>
  <div class="grid-cols-5 grid gap-4 h-full">
    <Sidebar />
    <Playground>
      <h1 class="text-2xl">{preview.data.title}</h1>
      {
        allVariants.map((variants) => (
          <div>
            <p class="text-xs text-neutral-400 my-1">{variants.variant}</p>
            <Content {...variants} />
          </div>
        ))
      }
    </Playground>
    <Inspector />
  </div>
</Layout>
