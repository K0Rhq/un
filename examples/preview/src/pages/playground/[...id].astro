---
import Inspector from "@/components/playground/Inspector.astro";
import Playground from "@/components/playground/Playground.astro";
import Sidebar from "@/components/playground/Sidebar.astro";
import Layout from "@/layouts/Layout.astro";
import { getCollection, render } from "astro:content";
import { componentProps } from "@/stores/inspector";

export async function getStaticPaths() {
  const previews = await getCollection("previews");
  return previews.map((preview) => ({
    params: { id: preview.id },
    props: { preview },
  }));
}

const { preview } = Astro.props;
const { Content } = await render(preview);

componentProps.set(preview.data.props);
---

<Layout>
  <div class="grid-cols-5 grid gap-4 h-full">
    <Sidebar />
    <Playground>
      <h1 class="text-2xl">{preview.data.title}</h1>
      <Content data-playground-content />
      <p id="props">{JSON.stringify(componentProps.value)}</p>
    </Playground>
    <Inspector />
  </div>
</Layout>

<div id="initial-props" data-props={JSON.stringify(preview.data.props)}></div>

<script>
  import { componentProps } from "@/stores/inspector";

  // Safe element access with null check
  const initialPropsElement = document.getElementById("initial-props");
  if (initialPropsElement?.dataset.props) {
    const initialProps = JSON.parse(initialPropsElement.dataset.props);
    componentProps.set(initialProps);
  }

  // Handle subscription for updates
  componentProps.subscribe((props) => {
    const propsElement = document.getElementById("props");
    if (propsElement && props !== undefined) {
      propsElement.textContent =
        typeof props === "object"
          ? JSON.stringify(props, null, 2)
          : String(props); // Convert to string to ensure it's never undefined
    }
  });

  // Update store when page changes
  document.addEventListener("astro:page-load", () => {
    const newPropsElement = document.getElementById("initial-props");
    if (newPropsElement?.dataset.props) {
      const newProps = JSON.parse(newPropsElement.dataset.props);
      componentProps.set(newProps);
    }
  });
</script>
